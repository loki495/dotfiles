# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

. ~/dotfiles/bash/lib/colors

export LANG=en_US.UTF-8

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend
PROMPT_COMMAND='history -a'

set -o vi

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)

export TERM=screen-256color
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

git_color() {
	if [[ -z $(git rev-parse --git-dir 2> /dev/null) ]]; then
		return
	fi

	any="$(git status --porcelain)"
	staged="$(git status --untracked-files=no --porcelain)"

    if [[ ! -z "${staged// }" ]]; then
		echo ${BoldYellow}
		return
	fi

    if [[ ! -z "${any// }" ]]; then
  		echo ${BoldRed}
		return
	fi

	echo ${BoldGreen}

}

set_bash_prompt() {
	PS1="${debian_chroot:+($debian_chroot)}[\[\e[0;32m\]\u@\h:\[\e[00m\] \w]\n$(git_color)\$(parse_git_branch)${White} \$ "
}

if [ "$color_prompt" = yes ]; then
	PROMPT_COMMAND=set_bash_prompt
else
     PS1="${debian_chroot:+($debian_chroot)}[\u@\h, load: `cat /proc/loadavg | awk '{ print $1; }'`] (\d - \t)\n\w \$ "
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*|alacritty)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"

    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto -N'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# alias nvim='~/nvim/nvim.appimage'

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

export EDITOR=vim
export VISUAL=vim

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

alias fix='$EDITOR -p `git diff --name-only | uniq`'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
export http_proxy=''
export https_proxy=''
export ftp_proxy=''
export socks_proxy=''


unset -f phpserver
unset pfhpserver
function phpserver() {
    if [ -z "$1" ]; then
        echo "Usage: phpserver <port>";
    else
        php -S localhost:$1 > php.log 2>&1 &
    fi
}

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

PATH=$HOME/.cargo/bin:$HOME/bin:$PATH

#if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
#  exec tmux
#fi

TERMINALBG="#000000"

export PATH="$PATH:$HOME/.config/composer/vendor/bin:$HOME/dotfiles/backup-tools:$HOME/dotfiles/bin"

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'alias ls='ls --color=auto'
alias la='ls -A'
alias rm='rm -i'
alias ..='cd ..'
alias cd..='cd ..'
alias gs='git status'
alias gss='git status -s'
alias gl='git log'
alias gb='git log --all --graph --decorate --oneline'
alias ga='git add --verbose'
alias gap='git add -p'
alias gac='git add --verbose .; git commit -v'
alias gpl='git pull'
alias gph='git push'
alias gpr='git pull --rebase'
alias gri='git rebase -i'
alias gc='git commit -v'
alias gca='git commit -av'
alias gsqd='git-summary -qd'
alias findd='find . -type d'
alias sync-folders='php ~/dotfiles/backup-tools/sync-folders.php'
alias gd='git diff'

unset -f findf
unset findf
function findf() {
    path=$1
    keywords=$2
    shift
    shift

    if [ $# -lt 2 ]; then
        echo "Usage: findf <path> <keywords> <extra (optional)>";
    else
        find $path -type f $@ -exec grep -Hn $keywords {} --color=always \;
    fi
}

set -o vi

function set_term_title() {
    echo -e "\e]0;$1\a"
}

[ -f ~/.bashrc.local ] && source ~/.bashrc.local
